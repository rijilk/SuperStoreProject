<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="30" passed="28" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-06-19T21:32:48 IST" name="Suite" finished-at="2023-06-19T21:39:22 IST" duration-ms="393449">
    <groups>
    </groups>
    <test started-at="2023-06-19T21:32:48 IST" name="chromeTest" finished-at="2023-06-19T21:36:36 IST" duration-ms="227418">
      <class name="executePageClasses.ExecuteDashboardPageClass">
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteDashboardPageClass@5c80cf32]" started-at="2023-06-19T21:34:11 IST" name="beforeMethod" finished-at="2023-06-19T21:34:16 IST" duration-ms="5597" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyClientsTabIsDisplayedorNot()[pri:0, instance:executePageClasses.ExecuteDashboardPageClass@5c80cf32]" started-at="2023-06-19T21:34:16 IST" name="verifyClientsTabIsDisplayedorNot" finished-at="2023-06-19T21:34:19 IST" duration-ms="2339" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyClientsTabIsDisplayedorNot -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteDashboardPageClass@5c80cf32]" started-at="2023-06-19T21:34:19 IST" name="afterMethod" finished-at="2023-06-19T21:34:19 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteDashboardPageClass@5c80cf32]" started-at="2023-06-19T21:34:19 IST" name="beforeMethod" finished-at="2023-06-19T21:34:46 IST" duration-ms="27067" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyLogoisDisplayed()[pri:0, instance:executePageClasses.ExecuteDashboardPageClass@5c80cf32]" started-at="2023-06-19T21:34:46 IST" name="verifyLogoisDisplayed" finished-at="2023-06-19T21:34:48 IST" duration-ms="2042" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLogoisDisplayed -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteDashboardPageClass@5c80cf32]" started-at="2023-06-19T21:34:48 IST" name="afterMethod" finished-at="2023-06-19T21:34:48 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteDashboardPageClass@5c80cf32]" started-at="2023-06-19T21:34:48 IST" name="beforeMethod" finished-at="2023-06-19T21:34:53 IST" duration-ms="5464" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyWelocmeMsgIsDisplayedorNot()[pri:0, instance:executePageClasses.ExecuteDashboardPageClass@5c80cf32]" started-at="2023-06-19T21:34:53 IST" name="verifyWelocmeMsgIsDisplayedorNot" finished-at="2023-06-19T21:34:55 IST" duration-ms="1928" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyWelocmeMsgIsDisplayedorNot -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteDashboardPageClass@5c80cf32]" started-at="2023-06-19T21:34:55 IST" name="afterMethod" finished-at="2023-06-19T21:34:55 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- executePageClasses.ExecuteDashboardPageClass -->
      <class name="executePageClasses.ExecuteWorkersPageClass">
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteWorkersPageClass@7d900ecf]" started-at="2023-06-19T21:34:55 IST" name="beforeMethod" finished-at="2023-06-19T21:35:00 IST" duration-ms="5210" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyToCreateANewWorker()[pri:0, instance:executePageClasses.ExecuteWorkersPageClass@7d900ecf]" started-at="2023-06-19T21:35:00 IST" name="verifyToCreateANewWorker" finished-at="2023-06-19T21:35:26 IST" duration-ms="25590" status="FAIL">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"(//*[contains(text(),'Rijil')])[2]"}
  (Session info: chrome=114.0.5735.134)
For documentation on this error, please visit: https://selenium.dev/exceptions/#no_such_element
Build info: version: '4.9.0', revision: 'd7057100a6'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '11.0.17'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [1c82e8c2b0cd38b7ce108af8d860e2d5, findElement {using=xpath, value=(//*[contains(text(),'Rijil')])[2]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 114.0.5735.134, chrome: {chromedriverVersion: 114.0.5735.90 (386bc09e8f4f..., userDataDir: C:\Users\RIJILK~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:55127}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: WINDOWS, proxy: Proxy(), se:cdp: ws://localhost:55127/devtoo..., se:cdpVersion: 114.0.5735.134, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 1c82e8c2b0cd38b7ce108af8d860e2d5]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"(//*[contains(text(),'Rijil')])[2]"}
  (Session info: chrome=114.0.5735.134)
For documentation on this error, please visit: https://selenium.dev/exceptions/#no_such_element
Build info: version: '4.9.0', revision: 'd7057100a6'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '11.0.17'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [1c82e8c2b0cd38b7ce108af8d860e2d5, findElement {using=xpath, value=(//*[contains(text(),'Rijil')])[2]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 114.0.5735.134, chrome: {chromedriverVersion: 114.0.5735.90 (386bc09e8f4f..., userDataDir: C:\Users\RIJILK~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:55127}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: WINDOWS, proxy: Proxy(), se:cdp: ws://localhost:55127/devtoo..., se:cdpVersion: 114.0.5735.134, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 1c82e8c2b0cd38b7ce108af8d860e2d5
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:53)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:193)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:183)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:158)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:162)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:60)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:352)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:344)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:70)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:39)
at com.sun.proxy.$Proxy17.isDisplayed(Unknown Source)
at utility.GeneralUtilities.isDisplayedMethod(GeneralUtilities.java:45)
at elementRepository.WorkersPageClass.isCreatedWorkerNameDisplayed(WorkersPageClass.java:234)
at executePageClasses.ExecuteWorkersPageClass.verifyToCreateANewWorker(ExecuteWorkersPageClass.java:47)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyToCreateANewWorker -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteWorkersPageClass@7d900ecf]" started-at="2023-06-19T21:35:26 IST" name="afterMethod" finished-at="2023-06-19T21:35:26 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteWorkersPageClass@7d900ecf]" started-at="2023-06-19T21:35:26 IST" name="beforeMethod" finished-at="2023-06-19T21:35:34 IST" duration-ms="8321" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifySearchFunctionality()[pri:1, instance:executePageClasses.ExecuteWorkersPageClass@7d900ecf]" started-at="2023-06-19T21:35:34 IST" name="verifySearchFunctionality" finished-at="2023-06-19T21:35:41 IST" duration-ms="6968" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySearchFunctionality -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteWorkersPageClass@7d900ecf]" started-at="2023-06-19T21:35:41 IST" name="afterMethod" finished-at="2023-06-19T21:35:41 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteWorkersPageClass@7d900ecf]" started-at="2023-06-19T21:35:41 IST" name="beforeMethod" finished-at="2023-06-19T21:35:48 IST" duration-ms="7081" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyDeleteFunctionality()[pri:2, instance:executePageClasses.ExecuteWorkersPageClass@7d900ecf]" started-at="2023-06-19T21:35:48 IST" name="verifyDeleteFunctionality" finished-at="2023-06-19T21:35:52 IST" duration-ms="3233" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDeleteFunctionality -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteWorkersPageClass@7d900ecf]" started-at="2023-06-19T21:35:52 IST" name="afterMethod" finished-at="2023-06-19T21:35:52 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- executePageClasses.ExecuteWorkersPageClass -->
      <class name="executePageClasses.ExecuteDedudctionPageClass">
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteDedudctionPageClass@353352b6]" started-at="2023-06-19T21:32:49 IST" name="beforeMethod" finished-at="2023-06-19T21:32:57 IST" duration-ms="8266" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyDeductionPageOpeiningWhileClickingDeductionTab()[pri:0, instance:executePageClasses.ExecuteDedudctionPageClass@353352b6]" started-at="2023-06-19T21:32:57 IST" name="verifyDeductionPageOpeiningWhileClickingDeductionTab" finished-at="2023-06-19T21:33:00 IST" duration-ms="2878" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDeductionPageOpeiningWhileClickingDeductionTab -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteDedudctionPageClass@353352b6]" started-at="2023-06-19T21:33:00 IST" name="afterMethod" finished-at="2023-06-19T21:33:00 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteDedudctionPageClass@353352b6]" started-at="2023-06-19T21:33:00 IST" name="beforeMethod" finished-at="2023-06-19T21:33:05 IST" duration-ms="5212" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyToCreateANewDedudction()[pri:0, instance:executePageClasses.ExecuteDedudctionPageClass@353352b6]" started-at="2023-06-19T21:33:05 IST" name="verifyToCreateANewDedudction" finished-at="2023-06-19T21:33:11 IST" duration-ms="6085" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyToCreateANewDedudction -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteDedudctionPageClass@353352b6]" started-at="2023-06-19T21:33:11 IST" name="afterMethod" finished-at="2023-06-19T21:33:11 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- executePageClasses.ExecuteDedudctionPageClass -->
      <class name="executePageClasses.ExecuteClientsPageClass">
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteClientsPageClass@6f53b8a]" started-at="2023-06-19T21:33:11 IST" name="beforeMethod" finished-at="2023-06-19T21:33:41 IST" duration-ms="29968" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifySearchFunctionality()[pri:0, instance:executePageClasses.ExecuteClientsPageClass@6f53b8a]" started-at="2023-06-19T21:33:41 IST" name="verifySearchFunctionality" finished-at="2023-06-19T21:33:52 IST" duration-ms="10822" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySearchFunctionality -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteClientsPageClass@6f53b8a]" started-at="2023-06-19T21:33:52 IST" name="afterMethod" finished-at="2023-06-19T21:33:52 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteClientsPageClass@6f53b8a]" started-at="2023-06-19T21:33:52 IST" name="beforeMethod" finished-at="2023-06-19T21:33:57 IST" duration-ms="5374" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyToCreateANewClient()[pri:0, instance:executePageClasses.ExecuteClientsPageClass@6f53b8a]" started-at="2023-06-19T21:33:57 IST" name="verifyToCreateANewClient" finished-at="2023-06-19T21:34:11 IST" duration-ms="13532" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyToCreateANewClient -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteClientsPageClass@6f53b8a]" started-at="2023-06-19T21:34:11 IST" name="afterMethod" finished-at="2023-06-19T21:34:11 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- executePageClasses.ExecuteClientsPageClass -->
      <class name="executePageClasses.ExecuteLoginPageClass">
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteLoginPageClass@6f01b95f]" started-at="2023-06-19T21:35:52 IST" name="beforeMethod" finished-at="2023-06-19T21:35:59 IST" duration-ms="7414" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyCorrectPageIsOpenWhileHittingTheUrl()[pri:0, instance:executePageClasses.ExecuteLoginPageClass@6f01b95f]" started-at="2023-06-19T21:35:59 IST" name="verifyCorrectPageIsOpenWhileHittingTheUrl" finished-at="2023-06-19T21:35:59 IST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCorrectPageIsOpenWhileHittingTheUrl -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteLoginPageClass@6f01b95f]" started-at="2023-06-19T21:35:59 IST" name="afterMethod" finished-at="2023-06-19T21:35:59 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteLoginPageClass@6f01b95f]" started-at="2023-06-19T21:35:59 IST" name="beforeMethod" finished-at="2023-06-19T21:36:14 IST" duration-ms="14625" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifySuccessfullLogin(java.lang.String,java.lang.String)[pri:0, instance:executePageClasses.ExecuteLoginPageClass@6f01b95f]" started-at="2023-06-19T21:36:14 IST" name="verifySuccessfullLogin" data-provider="DataProvider2" finished-at="2023-06-19T21:36:16 IST" duration-ms="1953" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[carol]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1q2w3e4r]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySuccessfullLogin -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteLoginPageClass@6f01b95f]" started-at="2023-06-19T21:36:16 IST" name="afterMethod" finished-at="2023-06-19T21:36:16 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteLoginPageClass@6f01b95f]" started-at="2023-06-19T21:36:16 IST" name="beforeMethod" finished-at="2023-06-19T21:36:21 IST" duration-ms="5356" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyUnSuccessfullLogin(java.lang.String,java.lang.String)[pri:0, instance:executePageClasses.ExecuteLoginPageClass@6f01b95f]" started-at="2023-06-19T21:36:21 IST" name="verifyUnSuccessfullLogin" data-provider="DataProvider1" finished-at="2023-06-19T21:36:22 IST" duration-ms="1415" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[carol]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1q23ew]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUnSuccessfullLogin -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteLoginPageClass@6f01b95f]" started-at="2023-06-19T21:36:22 IST" name="beforeMethod" finished-at="2023-06-19T21:36:27 IST" duration-ms="5069" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteLoginPageClass@6f01b95f]" started-at="2023-06-19T21:36:22 IST" name="afterMethod" finished-at="2023-06-19T21:36:22 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="verifyUnSuccessfullLogin(java.lang.String,java.lang.String)[pri:0, instance:executePageClasses.ExecuteLoginPageClass@6f01b95f]" started-at="2023-06-19T21:36:27 IST" name="verifyUnSuccessfullLogin" data-provider="DataProvider1" finished-at="2023-06-19T21:36:28 IST" duration-ms="813" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[carol11]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1q2w3e4r]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUnSuccessfullLogin -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteLoginPageClass@6f01b95f]" started-at="2023-06-19T21:36:28 IST" name="afterMethod" finished-at="2023-06-19T21:36:28 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteLoginPageClass@6f01b95f]" started-at="2023-06-19T21:36:28 IST" name="beforeMethod" finished-at="2023-06-19T21:36:35 IST" duration-ms="6780" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyUnSuccessfullLogin(java.lang.String,java.lang.String)[pri:0, instance:executePageClasses.ExecuteLoginPageClass@6f01b95f]" started-at="2023-06-19T21:36:35 IST" name="verifyUnSuccessfullLogin" data-provider="DataProvider1" finished-at="2023-06-19T21:36:36 IST" duration-ms="793" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[cc]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[wrong]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUnSuccessfullLogin -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteLoginPageClass@6f01b95f]" started-at="2023-06-19T21:36:36 IST" name="afterMethod" finished-at="2023-06-19T21:36:36 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- executePageClasses.ExecuteLoginPageClass -->
    </test> <!-- chromeTest -->
    <test started-at="2023-06-19T21:36:36 IST" name="edgeTest" finished-at="2023-06-19T21:39:22 IST" duration-ms="165981">
      <class name="executePageClasses.ExecuteDashboardPageClass">
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteDashboardPageClass@79207381]" started-at="2023-06-19T21:37:29 IST" name="beforeMethod" finished-at="2023-06-19T21:37:36 IST" duration-ms="6823" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[edge]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyClientsTabIsDisplayedorNot()[pri:0, instance:executePageClasses.ExecuteDashboardPageClass@79207381]" started-at="2023-06-19T21:37:36 IST" name="verifyClientsTabIsDisplayedorNot" finished-at="2023-06-19T21:37:38 IST" duration-ms="1964" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyClientsTabIsDisplayedorNot -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteDashboardPageClass@79207381]" started-at="2023-06-19T21:37:38 IST" name="afterMethod" finished-at="2023-06-19T21:37:38 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteDashboardPageClass@79207381]" started-at="2023-06-19T21:37:38 IST" name="beforeMethod" finished-at="2023-06-19T21:37:45 IST" duration-ms="6998" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[edge]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyLogoisDisplayed()[pri:0, instance:executePageClasses.ExecuteDashboardPageClass@79207381]" started-at="2023-06-19T21:37:45 IST" name="verifyLogoisDisplayed" finished-at="2023-06-19T21:37:47 IST" duration-ms="2107" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLogoisDisplayed -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteDashboardPageClass@79207381]" started-at="2023-06-19T21:37:47 IST" name="afterMethod" finished-at="2023-06-19T21:37:47 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteDashboardPageClass@79207381]" started-at="2023-06-19T21:37:47 IST" name="beforeMethod" finished-at="2023-06-19T21:37:54 IST" duration-ms="6883" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[edge]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyWelocmeMsgIsDisplayedorNot()[pri:0, instance:executePageClasses.ExecuteDashboardPageClass@79207381]" started-at="2023-06-19T21:37:54 IST" name="verifyWelocmeMsgIsDisplayedorNot" finished-at="2023-06-19T21:37:56 IST" duration-ms="1898" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyWelocmeMsgIsDisplayedorNot -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteDashboardPageClass@79207381]" started-at="2023-06-19T21:37:56 IST" name="afterMethod" finished-at="2023-06-19T21:37:56 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- executePageClasses.ExecuteDashboardPageClass -->
      <class name="executePageClasses.ExecuteWorkersPageClass">
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteWorkersPageClass@491b9b8]" started-at="2023-06-19T21:37:56 IST" name="beforeMethod" finished-at="2023-06-19T21:38:02 IST" duration-ms="6693" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[edge]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyToCreateANewWorker()[pri:0, instance:executePageClasses.ExecuteWorkersPageClass@491b9b8]" started-at="2023-06-19T21:38:02 IST" name="verifyToCreateANewWorker" finished-at="2023-06-19T21:38:20 IST" duration-ms="17167" status="FAIL">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"(//*[contains(text(),'Rijil')])[2]"}
  (Session info: MicrosoftEdge=114.0.1823.51)
For documentation on this error, please visit: https://selenium.dev/exceptions/#no_such_element
Build info: version: '4.9.0', revision: 'd7057100a6'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '11.0.17'
Driver info: org.openqa.selenium.edge.EdgeDriver
Command: [feded1fc98089c5b7749635c43057a31, findElement {using=xpath, value=(//*[contains(text(),'Rijil')])[2]}]
Capabilities {acceptInsecureCerts: false, browserName: msedge, browserVersion: 114.0.1823.51, ms:edgeOptions: {debuggerAddress: localhost:55663}, msedge: {msedgedriverVersion: 114.0.1823.51 (ab4ec67361d1..., userDataDir: C:\Users\RIJILK~1\AppData\L...}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: WINDOWS, proxy: Proxy(), se:cdp: ws://localhost:55663/devtoo..., se:cdpVersion: 114.0.1823.51, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: feded1fc98089c5b7749635c43057a31]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"(//*[contains(text(),'Rijil')])[2]"}
  (Session info: MicrosoftEdge=114.0.1823.51)
For documentation on this error, please visit: https://selenium.dev/exceptions/#no_such_element
Build info: version: '4.9.0', revision: 'd7057100a6'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '11.0.17'
Driver info: org.openqa.selenium.edge.EdgeDriver
Command: [feded1fc98089c5b7749635c43057a31, findElement {using=xpath, value=(//*[contains(text(),'Rijil')])[2]}]
Capabilities {acceptInsecureCerts: false, browserName: msedge, browserVersion: 114.0.1823.51, ms:edgeOptions: {debuggerAddress: localhost:55663}, msedge: {msedgedriverVersion: 114.0.1823.51 (ab4ec67361d1..., userDataDir: C:\Users\RIJILK~1\AppData\L...}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: WINDOWS, proxy: Proxy(), se:cdp: ws://localhost:55663/devtoo..., se:cdpVersion: 114.0.1823.51, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: feded1fc98089c5b7749635c43057a31
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:53)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:193)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:183)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:158)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:162)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:60)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:352)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:344)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:70)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:39)
at com.sun.proxy.$Proxy17.isDisplayed(Unknown Source)
at utility.GeneralUtilities.isDisplayedMethod(GeneralUtilities.java:45)
at elementRepository.WorkersPageClass.isCreatedWorkerNameDisplayed(WorkersPageClass.java:234)
at executePageClasses.ExecuteWorkersPageClass.verifyToCreateANewWorker(ExecuteWorkersPageClass.java:47)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyToCreateANewWorker -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteWorkersPageClass@491b9b8]" started-at="2023-06-19T21:38:20 IST" name="afterMethod" finished-at="2023-06-19T21:38:20 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteWorkersPageClass@491b9b8]" started-at="2023-06-19T21:38:20 IST" name="beforeMethod" finished-at="2023-06-19T21:38:26 IST" duration-ms="6832" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[edge]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifySearchFunctionality()[pri:1, instance:executePageClasses.ExecuteWorkersPageClass@491b9b8]" started-at="2023-06-19T21:38:26 IST" name="verifySearchFunctionality" finished-at="2023-06-19T21:38:30 IST" duration-ms="3207" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySearchFunctionality -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteWorkersPageClass@491b9b8]" started-at="2023-06-19T21:38:30 IST" name="afterMethod" finished-at="2023-06-19T21:38:30 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteWorkersPageClass@491b9b8]" started-at="2023-06-19T21:38:30 IST" name="beforeMethod" finished-at="2023-06-19T21:38:37 IST" duration-ms="6874" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[edge]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyDeleteFunctionality()[pri:2, instance:executePageClasses.ExecuteWorkersPageClass@491b9b8]" started-at="2023-06-19T21:38:37 IST" name="verifyDeleteFunctionality" finished-at="2023-06-19T21:38:39 IST" duration-ms="2961" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDeleteFunctionality -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteWorkersPageClass@491b9b8]" started-at="2023-06-19T21:38:39 IST" name="afterMethod" finished-at="2023-06-19T21:38:39 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- executePageClasses.ExecuteWorkersPageClass -->
      <class name="executePageClasses.ExecuteDedudctionPageClass">
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteDedudctionPageClass@50378a4]" started-at="2023-06-19T21:36:36 IST" name="beforeMethod" finished-at="2023-06-19T21:36:49 IST" duration-ms="13017" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[edge]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyDeductionPageOpeiningWhileClickingDeductionTab()[pri:0, instance:executePageClasses.ExecuteDedudctionPageClass@50378a4]" started-at="2023-06-19T21:36:49 IST" name="verifyDeductionPageOpeiningWhileClickingDeductionTab" finished-at="2023-06-19T21:36:52 IST" duration-ms="3146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDeductionPageOpeiningWhileClickingDeductionTab -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteDedudctionPageClass@50378a4]" started-at="2023-06-19T21:36:52 IST" name="afterMethod" finished-at="2023-06-19T21:36:52 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteDedudctionPageClass@50378a4]" started-at="2023-06-19T21:36:52 IST" name="beforeMethod" finished-at="2023-06-19T21:36:59 IST" duration-ms="6884" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[edge]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyToCreateANewDedudction()[pri:0, instance:executePageClasses.ExecuteDedudctionPageClass@50378a4]" started-at="2023-06-19T21:36:59 IST" name="verifyToCreateANewDedudction" finished-at="2023-06-19T21:37:05 IST" duration-ms="6242" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyToCreateANewDedudction -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteDedudctionPageClass@50378a4]" started-at="2023-06-19T21:37:05 IST" name="afterMethod" finished-at="2023-06-19T21:37:05 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- executePageClasses.ExecuteDedudctionPageClass -->
      <class name="executePageClasses.ExecuteClientsPageClass">
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteClientsPageClass@60f00693]" started-at="2023-06-19T21:37:05 IST" name="beforeMethod" finished-at="2023-06-19T21:37:12 IST" duration-ms="6892" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[edge]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifySearchFunctionality()[pri:0, instance:executePageClasses.ExecuteClientsPageClass@60f00693]" started-at="2023-06-19T21:37:12 IST" name="verifySearchFunctionality" finished-at="2023-06-19T21:37:15 IST" duration-ms="3372" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySearchFunctionality -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteClientsPageClass@60f00693]" started-at="2023-06-19T21:37:15 IST" name="afterMethod" finished-at="2023-06-19T21:37:15 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteClientsPageClass@60f00693]" started-at="2023-06-19T21:37:15 IST" name="beforeMethod" finished-at="2023-06-19T21:37:23 IST" duration-ms="7793" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[edge]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyToCreateANewClient()[pri:0, instance:executePageClasses.ExecuteClientsPageClass@60f00693]" started-at="2023-06-19T21:37:23 IST" name="verifyToCreateANewClient" finished-at="2023-06-19T21:37:29 IST" duration-ms="5865" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyToCreateANewClient -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteClientsPageClass@60f00693]" started-at="2023-06-19T21:37:29 IST" name="afterMethod" finished-at="2023-06-19T21:37:29 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- executePageClasses.ExecuteClientsPageClass -->
      <class name="executePageClasses.ExecuteLoginPageClass">
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteLoginPageClass@1a4927d6]" started-at="2023-06-19T21:38:40 IST" name="beforeMethod" finished-at="2023-06-19T21:38:47 IST" duration-ms="7175" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[edge]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyCorrectPageIsOpenWhileHittingTheUrl()[pri:0, instance:executePageClasses.ExecuteLoginPageClass@1a4927d6]" started-at="2023-06-19T21:38:47 IST" name="verifyCorrectPageIsOpenWhileHittingTheUrl" finished-at="2023-06-19T21:38:47 IST" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCorrectPageIsOpenWhileHittingTheUrl -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteLoginPageClass@1a4927d6]" started-at="2023-06-19T21:38:47 IST" name="afterMethod" finished-at="2023-06-19T21:38:47 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteLoginPageClass@1a4927d6]" started-at="2023-06-19T21:38:47 IST" name="beforeMethod" finished-at="2023-06-19T21:38:55 IST" duration-ms="8250" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[edge]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifySuccessfullLogin(java.lang.String,java.lang.String)[pri:0, instance:executePageClasses.ExecuteLoginPageClass@1a4927d6]" started-at="2023-06-19T21:38:55 IST" name="verifySuccessfullLogin" data-provider="DataProvider2" finished-at="2023-06-19T21:38:57 IST" duration-ms="2272" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[carol]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1q2w3e4r]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySuccessfullLogin -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteLoginPageClass@1a4927d6]" started-at="2023-06-19T21:38:57 IST" name="afterMethod" finished-at="2023-06-19T21:38:57 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteLoginPageClass@1a4927d6]" started-at="2023-06-19T21:38:57 IST" name="beforeMethod" finished-at="2023-06-19T21:39:05 IST" duration-ms="8055" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[edge]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyUnSuccessfullLogin(java.lang.String,java.lang.String)[pri:0, instance:executePageClasses.ExecuteLoginPageClass@1a4927d6]" started-at="2023-06-19T21:39:05 IST" name="verifyUnSuccessfullLogin" data-provider="DataProvider1" finished-at="2023-06-19T21:39:07 IST" duration-ms="1422" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[carol]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1q23ew]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUnSuccessfullLogin -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteLoginPageClass@1a4927d6]" started-at="2023-06-19T21:39:07 IST" name="afterMethod" finished-at="2023-06-19T21:39:07 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteLoginPageClass@1a4927d6]" started-at="2023-06-19T21:39:07 IST" name="beforeMethod" finished-at="2023-06-19T21:39:14 IST" duration-ms="6926" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[edge]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyUnSuccessfullLogin(java.lang.String,java.lang.String)[pri:0, instance:executePageClasses.ExecuteLoginPageClass@1a4927d6]" started-at="2023-06-19T21:39:14 IST" name="verifyUnSuccessfullLogin" data-provider="DataProvider1" finished-at="2023-06-19T21:39:14 IST" duration-ms="824" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[carol11]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1q2w3e4r]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUnSuccessfullLogin -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteLoginPageClass@1a4927d6]" started-at="2023-06-19T21:39:14 IST" name="afterMethod" finished-at="2023-06-19T21:39:14 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:executePageClasses.ExecuteLoginPageClass@1a4927d6]" started-at="2023-06-19T21:39:14 IST" name="beforeMethod" finished-at="2023-06-19T21:39:21 IST" duration-ms="6641" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[edge]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyUnSuccessfullLogin(java.lang.String,java.lang.String)[pri:0, instance:executePageClasses.ExecuteLoginPageClass@1a4927d6]" started-at="2023-06-19T21:39:21 IST" name="verifyUnSuccessfullLogin" data-provider="DataProvider1" finished-at="2023-06-19T21:39:22 IST" duration-ms="748" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[cc]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[wrong]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUnSuccessfullLogin -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:executePageClasses.ExecuteLoginPageClass@1a4927d6]" started-at="2023-06-19T21:39:22 IST" name="afterMethod" finished-at="2023-06-19T21:39:22 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- executePageClasses.ExecuteLoginPageClass -->
    </test> <!-- edgeTest -->
  </suite> <!-- Suite -->
</testng-results>
